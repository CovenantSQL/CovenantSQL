package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *Block) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84)
	o = hsp.AppendArrayHeader(o, uint32(len(z.Acks)))
	for za0003 := range z.Acks {
		if z.Acks[za0003] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.Acks[za0003].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	o = hsp.AppendArrayHeader(o, uint32(len(z.FailedReqs)))
	for za0001 := range z.FailedReqs {
		if z.FailedReqs[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.FailedReqs[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	o = hsp.AppendArrayHeader(o, uint32(len(z.QueryTxs)))
	for za0002 := range z.QueryTxs {
		if z.QueryTxs[za0002] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.QueryTxs[za0002].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	// map header, size 2
	o = append(o, 0x82)
	if oTemp, err := z.SignedHeader.Header.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.SignedHeader.HSV.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 5 + hsp.ArrayHeaderSize
	for za0003 := range z.Acks {
		if z.Acks[za0003] == nil {
			s += hsp.NilSize
		} else {
			s += z.Acks[za0003].Msgsize()
		}
	}
	s += 11 + hsp.ArrayHeaderSize
	for za0001 := range z.FailedReqs {
		if z.FailedReqs[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z.FailedReqs[za0001].Msgsize()
		}
	}
	s += 9 + hsp.ArrayHeaderSize
	for za0002 := range z.QueryTxs {
		if z.QueryTxs[za0002] == nil {
			s += hsp.NilSize
		} else {
			s += z.QueryTxs[za0002].Msgsize()
		}
	}
	s += 13 + 1 + 7 + z.SignedHeader.Header.Msgsize() + 4 + z.SignedHeader.HSV.Msgsize()
	return
}

// MarshalHash marshals for hash
func (z Blocks) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	o = hsp.AppendArrayHeader(o, uint32(len(z)))
	for za0001 := range z {
		if z[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Blocks) Msgsize() (s int) {
	s = hsp.ArrayHeaderSize
	for za0001 := range z {
		if z[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z[za0001].Msgsize()
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *Header) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 6
	o = append(o, 0x86)
	if oTemp, err := z.GenesisHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.MerkleRoot.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.ParentHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Producer.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendTime(o, z.Timestamp)
	o = hsp.AppendInt32(o, z.Version)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Header) Msgsize() (s int) {
	s = 1 + 12 + z.GenesisHash.Msgsize() + 11 + z.MerkleRoot.Msgsize() + 11 + z.ParentHash.Msgsize() + 9 + z.Producer.Msgsize() + 10 + hsp.TimeSize + 8 + hsp.Int32Size
	return
}

// MarshalHash marshals for hash
func (z *QueryAsTx) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 2
	o = append(o, 0x82)
	if z.Request == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.Request.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	if z.Response == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.Response.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryAsTx) Msgsize() (s int) {
	s = 1 + 8
	if z.Request == nil {
		s += hsp.NilSize
	} else {
		s += z.Request.Msgsize()
	}
	s += 9
	if z.Response == nil {
		s += hsp.NilSize
	} else {
		s += z.Response.Msgsize()
	}
	return
}

// MarshalHash marshals for hash
func (z *SignedHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 2
	o = append(o, 0x82)
	if oTemp, err := z.HSV.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Header.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedHeader) Msgsize() (s int) {
	s = 1 + 4 + z.HSV.Msgsize() + 7 + z.Header.Msgsize()
	return
}
