package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *Block) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83)
	o = hsp.AppendArrayHeader(o, uint32(len(z.ReadQueries)))
	for za0001 := range z.ReadQueries {
		if z.ReadQueries[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.ReadQueries[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	// map header, size 2
	o = append(o, 0x82)
	if oTemp, err := z.SignedBlockHeader.BlockHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.SignedBlockHeader.DefaultHashSignVerifierImpl.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendArrayHeader(o, uint32(len(z.WriteQueries)))
	for za0002 := range z.WriteQueries {
		if z.WriteQueries[za0002] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.WriteQueries[za0002].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 12 + hsp.ArrayHeaderSize
	for za0001 := range z.ReadQueries {
		if z.ReadQueries[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z.ReadQueries[za0001].Msgsize()
		}
	}
	s += 18 + 1 + 12 + z.SignedBlockHeader.BlockHeader.Msgsize() + 28 + z.SignedBlockHeader.DefaultHashSignVerifierImpl.Msgsize() + 13 + hsp.ArrayHeaderSize
	for za0002 := range z.WriteQueries {
		if z.WriteQueries[za0002] == nil {
			s += hsp.NilSize
		} else {
			s += z.WriteQueries[za0002].Msgsize()
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *BlockHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 6
	o = append(o, 0x86)
	if oTemp, err := z.GenesisHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.MerkleRoot.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.ParentHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Producer.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendTime(o, z.Timestamp)
	o = hsp.AppendInt32(o, z.Version)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlockHeader) Msgsize() (s int) {
	s = 1 + 12 + z.GenesisHash.Msgsize() + 11 + z.MerkleRoot.Msgsize() + 11 + z.ParentHash.Msgsize() + 9 + z.Producer.Msgsize() + 10 + hsp.TimeSize + 8 + hsp.Int32Size
	return
}

// MarshalHash marshals for hash
func (z *SignedBlockHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 2
	o = append(o, 0x82)
	if oTemp, err := z.BlockHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.DefaultHashSignVerifierImpl.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedBlockHeader) Msgsize() (s int) {
	s = 1 + 12 + z.BlockHeader.Msgsize() + 28 + z.DefaultHashSignVerifierImpl.Msgsize()
	return
}
