package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash45c9f0 marshals for hash
func (z *ResourceMeta) MarshalHash45c9f0() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize45c9f0())
	// map header, size 11
	o = append(o, 0x8b)
	o = hsp.AppendFloat64(o, z.ConsistencyLevel)
	o = hsp.AppendString(o, z.EncryptionKey)
	o = hsp.AppendInt(o, z.IsolationLevel)
	o = hsp.AppendFloat64(o, z.LoadAvgPerCPU)
	o = hsp.AppendUint64(o, z.Memory)
	o = hsp.AppendUint16(o, z.Node)
	o = hsp.AppendUint64(o, z.Space)
	o = hsp.AppendUint16(o, z.StandbyNode)
	o = hsp.AppendArrayHeader(o, uint32(len(z.TargetMiners)))
	for za0001 := range z.TargetMiners {
		if oTemp, err := z.TargetMiners[za0001].MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = hsp.AppendBool(o, z.UseEventualConsistency)
	o = hsp.AppendInt32(o, z.Version)
	return
}

// Msgsize45c9f0 returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResourceMeta) Msgsize45c9f0() (s int) {
	s = 1 + 17 + hsp.Float64Size + 14 + hsp.StringPrefixSize + len(z.EncryptionKey) + 15 + hsp.IntSize + 14 + hsp.Float64Size + 7 + hsp.Uint64Size + 5 + hsp.Uint16Size + 6 + hsp.Uint64Size + 10 + hsp.Uint16Size + 13 + hsp.ArrayHeaderSize
	for za0001 := range z.TargetMiners {
		s += z.TargetMiners[za0001].Msgsize()
	}
	s += 23 + hsp.BoolSize + 2 + hsp.Int32Size
	return
}
