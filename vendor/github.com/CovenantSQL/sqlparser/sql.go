//line sql.y:19
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:54
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const ALL = 57360
const DISTINCT = 57361
const AS = 57362
const EXISTS = 57363
const ASC = 57364
const DESC = 57365
const INTO = 57366
const KEY = 57367
const DEFAULT = 57368
const SET = 57369
const VALUES = 57370
const LAST_INSERT_ID = 57371
const JOIN = 57372
const LEFT = 57373
const RIGHT = 57374
const INNER = 57375
const OUTER = 57376
const CROSS = 57377
const NATURAL = 57378
const ON = 57379
const USING = 57380
const ID = 57381
const HEX = 57382
const STRING = 57383
const INTEGRAL = 57384
const FLOAT = 57385
const HEXNUM = 57386
const VALUE_ARG = 57387
const POS_ARG = 57388
const LIST_ARG = 57389
const COMMENT = 57390
const NULL = 57391
const TRUE = 57392
const FALSE = 57393
const FULL = 57394
const COLUMNS = 57395
const OR = 57396
const AND = 57397
const NOT = 57398
const BETWEEN = 57399
const CASE = 57400
const WHEN = 57401
const THEN = 57402
const ELSE = 57403
const END = 57404
const LE = 57405
const GE = 57406
const NE = 57407
const IS = 57408
const LIKE = 57409
const REGEXP = 57410
const IN = 57411
const NULL_SAFE_NOTEQUAL = 57412
const SHIFT_LEFT = 57413
const SHIFT_RIGHT = 57414
const DIV = 57415
const MOD = 57416
const UNARY = 57417
const INTERVAL = 57418
const CREATE = 57419
const ALTER = 57420
const DROP = 57421
const RENAME = 57422
const ADD = 57423
const TABLE = 57424
const INDEX = 57425
const TO = 57426
const IGNORE = 57427
const IF = 57428
const UNIQUE = 57429
const PRIMARY = 57430
const COLUMN = 57431
const CONSTRAINT = 57432
const FOREIGN = 57433
const SHOW = 57434
const DESCRIBE = 57435
const DATE = 57436
const ESCAPE = 57437
const EXPLAIN = 57438
const TINYINT = 57439
const SMALLINT = 57440
const MEDIUMINT = 57441
const INT = 57442
const INTEGER = 57443
const BIGINT = 57444
const INTNUM = 57445
const REAL = 57446
const DOUBLE = 57447
const FLOAT_TYPE = 57448
const DECIMAL = 57449
const NUMERIC = 57450
const TIME = 57451
const TIMESTAMP = 57452
const DATETIME = 57453
const YEAR = 57454
const CHAR = 57455
const VARCHAR = 57456
const BOOL = 57457
const NCHAR = 57458
const TEXT = 57459
const TINYTEXT = 57460
const MEDIUMTEXT = 57461
const LONGTEXT = 57462
const BLOB = 57463
const TINYBLOB = 57464
const MEDIUMBLOB = 57465
const LONGBLOB = 57466
const AUTO_INCREMENT = 57467
const SIGNED = 57468
const UNSIGNED = 57469
const ZEROFILL = 57470
const TABLES = 57471
const CURRENT_TIMESTAMP = 57472
const CURRENT_DATE = 57473
const CURRENT_TIME = 57474
const REPLACE = 57475
const CAST = 57476
const GROUP_CONCAT = 57477
const SEPARATOR = 57478
const UNUSED = 57479

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"KEY",
	"DEFAULT",
	"SET",
	"VALUES",
	"LAST_INSERT_ID",
	"JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"POS_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"FULL",
	"COLUMNS",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"NULL_SAFE_NOTEQUAL",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"INTERVAL",
	"'.'",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ADD",
	"TABLE",
	"INDEX",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"EXPLAIN",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"AUTO_INCREMENT",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"TABLES",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"REPLACE",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 17,
	-2, 4,
	-1, 118,
	1, 157,
	5, 157,
	11, 157,
	12, 157,
	13, 157,
	14, 157,
	16, 157,
	27, 157,
	30, 157,
	31, 157,
	33, 157,
	35, 157,
	36, 157,
	37, 157,
	38, 157,
	40, 157,
	41, 157,
	155, 157,
	-2, 170,
	-1, 188,
	93, 356,
	-2, 352,
	-1, 189,
	93, 357,
	-2, 353,
	-1, 403,
	5, 17,
	-2, 325,
	-1, 411,
	93, 176,
	-2, 150,
	-1, 518,
	93, 359,
	-2, 355,
	-1, 550,
	5, 18,
	-2, 226,
	-1, 606,
	5, 18,
	-2, 326,
	-1, 669,
	5, 17,
	-2, 328,
	-1, 729,
	5, 18,
	-2, 329,
}

const yyPrivate = 57344

const yyLast = 4424

var yyAct = [...]int{

	189, 383, 532, 461, 621, 431, 174, 408, 533, 264,
	513, 32, 409, 586, 430, 524, 407, 442, 406, 47,
	489, 339, 176, 97, 97, 45, 545, 427, 140, 191,
	211, 123, 466, 212, 3, 457, 103, 142, 93, 97,
	436, 114, 47, 31, 202, 712, 144, 138, 125, 626,
	627, 628, 432, 565, 124, 115, 449, 629, 625, 128,
	101, 704, 702, 468, 120, 341, 683, 467, 467, 113,
	129, 132, 444, 111, 25, 27, 15, 16, 636, 127,
	91, 85, 86, 262, 134, 97, 84, 92, 98, 559,
	97, 22, 257, 256, 716, 675, 639, 609, 357, 515,
	360, 361, 362, 363, 364, 357, 592, 29, 543, 345,
	478, 97, 382, 139, 344, 343, 343, 154, 193, 87,
	97, 97, 97, 594, 89, 88, 542, 664, 131, 97,
	345, 345, 97, 525, 97, 97, 255, 137, 396, 397,
	97, 102, 194, 450, 198, 684, 682, 443, 525, 130,
	598, 446, 630, 496, 136, 686, 118, 563, 447, 215,
	344, 343, 18, 19, 20, 685, 494, 495, 493, 568,
	145, 192, 29, 344, 343, 197, 345, 21, 23, 567,
	266, 24, 566, 492, 344, 343, 218, 253, 728, 345,
	623, 666, 560, 254, 718, 719, 258, 97, 260, 261,
	345, 97, 97, 97, 97, 464, 125, 679, 678, 662,
	97, 473, 143, 348, 97, 133, 143, 97, 28, 724,
	47, 47, 579, 580, 581, 723, 435, 125, 33, 403,
	398, 631, 399, 124, 482, 484, 485, 118, 410, 519,
	338, 483, 412, 384, 414, 199, 389, 425, 604, 423,
	424, 200, 437, 421, 473, 426, 463, 413, 200, 415,
	347, 405, 632, 97, 97, 634, 633, 374, 358, 359,
	360, 361, 362, 363, 364, 357, 649, 608, 143, 658,
	659, 660, 657, 346, 661, 459, 460, 519, 143, 651,
	469, 654, 656, 650, 541, 648, 200, 143, 652, 474,
	344, 343, 220, 219, 473, 553, 394, 29, 653, 655,
	451, 462, 616, 556, 25, 458, 345, 428, 118, 118,
	118, 118, 25, 25, 177, 26, 41, 470, 471, 473,
	569, 118, 365, 366, 358, 359, 360, 361, 362, 363,
	364, 357, 47, 401, 402, 668, 541, 29, 125, 546,
	547, 26, 549, 418, 476, 29, 29, 419, 12, 108,
	417, 204, 207, 119, 205, 416, 206, 208, 546, 547,
	722, 452, 453, 490, 204, 207, 562, 205, 36, 206,
	208, 47, 454, 455, 456, 420, 207, 512, 721, 435,
	557, 465, 517, 107, 38, 39, 259, 125, 526, 210,
	141, 109, 104, 693, 100, 47, 105, 33, 125, 479,
	480, 539, 486, 487, 692, 638, 522, 538, 428, 425,
	531, 520, 263, 518, 530, 534, 135, 121, 35, 410,
	37, 47, 99, 26, 540, 516, 554, 435, 536, 551,
	410, 548, 30, 1, 213, 90, 620, 439, 429, 122,
	40, 384, 521, 438, 681, 624, 445, 564, 448, 558,
	192, 561, 223, 550, 224, 222, 226, 47, 491, 97,
	225, 221, 647, 125, 375, 97, 125, 572, 47, 124,
	687, 209, 214, 475, 125, 435, 42, 110, 578, 676,
	576, 527, 528, 529, 552, 574, 537, 395, 570, 381,
	573, 190, 385, 386, 387, 575, 390, 691, 410, 637,
	391, 392, 393, 596, 582, 388, 490, 523, 152, 518,
	404, 153, 481, 163, 160, 119, 119, 119, 119, 162,
	161, 516, 150, 571, 400, 349, 151, 146, 213, 597,
	117, 195, 203, 201, 544, 116, 472, 711, 125, 14,
	435, 589, 610, 614, 47, 34, 47, 47, 611, 112,
	435, 619, 435, 622, 600, 601, 602, 603, 618, 11,
	97, 10, 17, 605, 606, 607, 9, 8, 7, 6,
	410, 5, 4, 106, 518, 593, 148, 13, 617, 2,
	0, 599, 118, 47, 0, 0, 613, 640, 0, 435,
	0, 384, 645, 0, 0, 0, 0, 663, 612, 47,
	47, 491, 615, 667, 590, 672, 673, 47, 0, 47,
	0, 671, 595, 125, 554, 435, 0, 534, 644, 677,
	0, 0, 0, 0, 635, 0, 47, 0, 0, 0,
	47, 669, 435, 125, 690, 646, 435, 674, 0, 0,
	175, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 0,
	0, 714, 0, 94, 94, 410, 47, 0, 0, 0,
	47, 0, 435, 696, 720, 697, 622, 0, 689, 94,
	0, 534, 646, 0, 0, 726, 0, 0, 0, 0,
	26, 0, 0, 0, 715, 0, 0, 0, 0, 0,
	385, 0, 0, 0, 0, 0, 0, 47, 0, 47,
	0, 0, 0, 730, 0, 125, 0, 535, 717, 26,
	0, 731, 713, 0, 0, 94, 0, 0, 0, 0,
	94, 0, 376, 377, 378, 379, 380, 0, 0, 727,
	0, 0, 0, 729, 0, 0, 0, 0, 725, 384,
	0, 94, 0, 0, 0, 0, 680, 0, 0, 0,
	94, 217, 94, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 94, 0, 94, 94, 0, 0, 0, 0,
	265, 342, 698, 0, 699, 0, 701, 0, 703, 119,
	705, 706, 707, 708, 709, 710, 237, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 248, 249, 250, 251,
	252, 238, 239, 240, 241, 227, 228, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 0, 0, 0,
	0, 591, 0, 0, 0, 0, 0, 94, 0, 0,
	217, 94, 94, 94, 94, 0, 0, 0, 0, 0,
	422, 641, 0, 0, 94, 0, 0, 217, 356, 355,
	365, 366, 358, 359, 360, 361, 362, 363, 364, 357,
	0, 356, 355, 365, 366, 358, 359, 360, 361, 362,
	363, 364, 357, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 94, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 0, 0, 0, 535,
	0, 0, 670, 0, 0, 0, 488, 0, 0, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 588, 0, 0, 0, 0, 0,
	688, 356, 355, 365, 366, 358, 359, 360, 361, 362,
	363, 364, 357, 0, 356, 355, 365, 366, 358, 359,
	360, 361, 362, 363, 364, 357, 0, 0, 69, 0,
	0, 57, 0, 535, 52, 26, 0, 77, 72, 64,
	58, 59, 48, 0, 70, 55, 56, 54, 67, 74,
	75, 53, 82, 51, 81, 50, 66, 73, 78, 65,
	62, 49, 76, 63, 61, 0, 71, 79, 83, 0,
	0, 0, 342, 265, 0, 0, 0, 80, 351, 0,
	354, 217, 342, 342, 342, 0, 367, 368, 369, 370,
	371, 372, 217, 352, 353, 350, 373, 356, 355, 365,
	366, 358, 359, 360, 361, 362, 363, 364, 357, 356,
	355, 365, 366, 358, 359, 360, 361, 362, 363, 364,
	357, 583, 584, 585, 355, 365, 366, 358, 359, 360,
	361, 362, 363, 364, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	217, 0, 0, 0, 342, 94, 0, 0, 0, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 342, 642, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	46, 0, 433, 434, 0, 0, 0, 217, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 555, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	46, 0, 433, 434, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 694, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 29, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 330, 321, 300, 332, 281, 292, 336,
	293, 294, 315, 273, 308, 68, 0, 284, 269, 290,
	270, 282, 302, 305, 280, 323, 334, 60, 304, 306,
	320, 299, 316, 276, 310, 313, 333, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 329, 291, 0, 0, 314, 268, 311, 0, 272,
	274, 335, 327, 287, 288, 0, 0, 0, 0, 0,
	0, 303, 307, 317, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 309, 0, 0, 0,
	301, 0, 275, 0, 286, 318, 267, 325, 298, 328,
	296, 295, 331, 69, 0, 0, 57, 324, 283, 52,
	289, 337, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	271, 71, 79, 83, 326, 279, 277, 278, 319, 0,
	0, 322, 80, 68, 0, 514, 0, 149, 0, 0,
	0, 0, 0, 0, 181, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 0, 0, 188, 165,
	164, 166, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 0, 0, 0, 0, 147, 158, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 156,
	340, 0, 0, 0, 186, 0, 157, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 69, 0, 0, 57, 0, 0, 52, 0, 0,
	77, 72, 64, 58, 59, 48, 0, 70, 55, 56,
	54, 67, 74, 75, 53, 82, 51, 81, 50, 66,
	73, 78, 65, 62, 49, 76, 63, 61, 0, 71,
	79, 83, 0, 182, 183, 184, 187, 178, 179, 68,
	80, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	181, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 188, 165, 164, 166, 167, 168,
	169, 170, 0, 0, 171, 172, 173, 0, 0, 0,
	0, 147, 158, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 156, 340, 0, 0, 0,
	186, 0, 157, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 69, 0, 0,
	57, 0, 0, 52, 0, 0, 77, 72, 64, 58,
	59, 48, 0, 70, 55, 56, 54, 67, 74, 75,
	53, 82, 51, 81, 50, 66, 73, 78, 65, 62,
	49, 76, 63, 61, 0, 71, 79, 83, 0, 182,
	183, 184, 187, 178, 179, 68, 80, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 181, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 29, 0, 143,
	188, 165, 164, 166, 167, 168, 169, 170, 0, 0,
	171, 172, 173, 0, 0, 0, 0, 147, 158, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 156, 0, 0, 0, 0, 186, 0, 157, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 69, 0, 0, 57, 0, 0, 52,
	0, 0, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	25, 71, 79, 83, 0, 182, 183, 184, 187, 178,
	179, 68, 80, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 181, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 188, 165, 164, 166,
	167, 168, 169, 170, 0, 0, 171, 172, 173, 0,
	0, 0, 0, 147, 158, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 156, 0, 0,
	0, 0, 186, 0, 157, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 69,
	0, 0, 57, 0, 0, 52, 0, 0, 77, 72,
	64, 58, 59, 48, 0, 70, 55, 56, 54, 67,
	74, 75, 53, 82, 51, 81, 50, 66, 73, 78,
	65, 62, 49, 76, 63, 61, 0, 71, 79, 83,
	0, 182, 183, 184, 187, 178, 179, 68, 80, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 181, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 188, 165, 164, 166, 167, 168, 169, 170,
	0, 0, 171, 172, 173, 0, 0, 0, 0, 147,
	158, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 156, 0, 0, 0, 0, 186, 0,
	157, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 69, 0, 0, 57, 0,
	0, 52, 0, 0, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 0, 71, 79, 83, 68, 182, 183, 184,
	187, 178, 179, 0, 80, 0, 0, 181, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 0,
	0, 188, 165, 164, 166, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 0, 0, 0, 158,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 156, 0, 0, 0, 0, 186, 0, 157,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 69, 0, 0, 57, 0, 0,
	52, 0, 0, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 0, 71, 79, 83, 0, 182, 183, 184, 187,
	178, 179, 68, 80, 0, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 343, 68, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 0, 60, 0, 345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 57, 0, 0, 52, 0, 0, 77,
	72, 64, 58, 59, 48, 0, 70, 55, 56, 54,
	67, 74, 75, 53, 82, 51, 81, 50, 66, 73,
	78, 65, 62, 49, 76, 63, 61, 443, 71, 79,
	83, 441, 440, 0, 0, 57, 0, 0, 52, 80,
	0, 77, 72, 64, 58, 59, 48, 0, 70, 55,
	56, 54, 67, 74, 75, 53, 82, 51, 81, 50,
	66, 73, 78, 65, 62, 49, 76, 63, 61, 25,
	71, 79, 83, 0, 0, 0, 0, 0, 0, 0,
	68, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 0, 46, 0, 126, 0, 0,
	25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 96, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 57, 0, 0, 52, 0, 0, 77, 72, 64,
	58, 59, 48, 0, 70, 55, 56, 54, 67, 74,
	75, 53, 82, 51, 81, 50, 66, 73, 78, 65,
	62, 49, 76, 63, 61, 0, 71, 79, 83, 69,
	0, 0, 57, 0, 0, 52, 0, 80, 77, 72,
	64, 58, 59, 48, 0, 70, 55, 56, 54, 67,
	74, 75, 53, 82, 51, 81, 50, 66, 73, 78,
	65, 62, 49, 76, 63, 61, 0, 71, 79, 83,
	68, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 0, 96, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 57, 0, 0, 52, 0, 0, 77, 72, 64,
	58, 59, 48, 0, 70, 55, 56, 54, 67, 74,
	75, 53, 82, 51, 81, 50, 66, 73, 78, 65,
	62, 49, 76, 63, 61, 0, 71, 79, 83, 69,
	0, 0, 57, 0, 0, 52, 0, 80, 77, 72,
	64, 58, 59, 48, 0, 70, 55, 56, 54, 67,
	74, 75, 53, 82, 51, 81, 50, 66, 73, 78,
	65, 62, 49, 76, 63, 61, 0, 71, 79, 83,
	68, 0, 0, 0, 0, 0, 0, 196, 80, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 57, 0, 0, 52, 0, 0, 77, 72, 64,
	58, 59, 48, 0, 70, 55, 56, 54, 67, 74,
	75, 53, 82, 51, 81, 50, 66, 73, 78, 65,
	62, 49, 76, 63, 61, 0, 71, 79, 83, 43,
	0, 0, 0, 0, 44, 69, 0, 80, 57, 0,
	0, 52, 0, 0, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 0, 71, 79, 83, 68, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 57, 0, 0,
	52, 0, 0, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 0, 71, 79, 83, 69, 0, 0, 57, 0,
	0, 52, 0, 80, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 0, 71, 79, 83, 68, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 57, 0, 0,
	52, 0, 0, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 0, 71, 79, 83, 69, 0, 0, 57, 0,
	0, 52, 0, 80, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 0, 71, 79, 83, 68, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 57, 0, 0,
	52, 0, 0, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 0, 71, 79, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 80,
}
var yyPact = [...]int{

	68, -1000, -112, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 393, 423, -1000, -1000, -1000, 287, 3800, -13,
	-18, 25, 4099, 4099, -1000, -1000, 308, 84, -1000, -1000,
	-1000, -1000, 386, 391, 308, 383, -29, -1000, 3583, 417,
	-1000, 3929, -21, -33, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4099, -32, -32, -15, 416, 4099,
	-9, -1000, -1000, -1000, 20, -1000, -1000, -1000, -1000, -1000,
	381, 175, -104, -1000, 2970, 2970, 393, -1000, 308, -1000,
	3753, -1000, 93, 218, 344, -1000, -1000, -1000, 379, 3454,
	3624, 4099, 262, -1000, 695, -1000, -1000, -33, 4099, 77,
	-5, 4099, 375, 4099, 4099, -16, -1000, -1000, 412, 2288,
	2562, -1000, -1000, -1000, -1000, 243, -1000, 2970, 979, 268,
	-1000, -1000, -1000, -1000, -1000, 3099, 3099, 3099, 3099, 3099,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 268, 19, -1000, 2834, 268, 268,
	2970, 268, -1000, -1000, -1000, 268, 268, 268, -1000, -1000,
	266, -1000, 116, 386, 175, 316, 4099, -1000, -1000, 3970,
	3583, 3583, 3583, 3583, -1000, 335, 330, 323, 355, 4269,
	-1000, 256, 175, 3454, -1000, -1000, 4099, -1000, 407, 1388,
	3277, 99, -88, -1000, -1000, 271, -1000, 271, 271, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 271, 271,
	271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 276, 276,
	276, 272, 272, 163, -1000, 370, -39, -38, -1000, -1000,
	-1000, -1000, 4099, 4099, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 289, -1000,
	-1000, 3235, 17, 2970, 2970, 182, 2970, 2970, 36, 3099,
	133, 92, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
	3099, 3099, 3099, 3099, 3099, 3099, 3099, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 308, -1000, -1000, -1000, -1000,
	883, 2426, 2138, 247, 57, 2834, 2970, 381, 70, 57,
	3970, 2562, 2562, 2562, 2970, -1000, -1000, -1000, -1000, -1000,
	-1000, 3970, 268, -1000, 3413, -1000, 306, -1000, 59, -1000,
	15, -1000, 344, 312, 331, -1000, -1000, -1000, -1000, 322,
	-1000, -1000, -1000, -1000, -1000, 175, -1000, 393, 2970, 265,
	1238, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 274,
	365, 47, 150, -1000, -1000, 350, -1000, 105, -92, -1000,
	-1000, 137, -1000, -1000, -1000, -1000, -1000, -1000, 134, -1000,
	-1000, -1000, 124, -1000, 293, -1000, 3929, -1000, 4099, 3970,
	-1000, -1000, 407, 2562, 3583, -1000, -1000, 3929, 1838, 36,
	58, -1000, -1000, 170, -1000, -1000, 57, 57, 991, -1000,
	-1000, -1000, -1000, 133, 3099, 3099, 3099, 790, 991, 896,
	252, 1005, -1000, 16, 16, 9, 9, 9, 9, 9,
	186, 186, -1000, 175, 2562, 264, 268, 13, -1000, 2970,
	-1000, 103, 2562, 85, -1000, 2970, 175, 171, 171, 171,
	-1000, 254, 208, -1000, -1000, 2698, 175, 237, -1000, 4,
	393, 3970, 2970, 2138, -1000, -1000, 2970, 273, -1000, -1000,
	-1000, 386, 57, 1388, -1000, 1388, 4140, -1000, 148, -1000,
	-1000, -84, 5, -1000, -1000, -1000, 190, 222, 225, 4099,
	-1000, -1000, -23, 403, -1000, 211, -1000, -1000, 3, -1000,
	-1000, -1000, -1000, 790, 991, 803, -1000, 3099, 3099, -1000,
	171, 2562, 1988, 57, 165, 214, 61, -1000, 2970, 127,
	-1000, -1000, -1000, -1000, 268, -1000, -1000, 317, 3929, 4140,
	386, -1000, 57, -1000, 2, 57, 3929, -1000, 1238, -1000,
	167, -1000, 271, -1000, 41, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 120, -1000, 110, 1688, 3970, 401, 388, 1538,
	-1000, 3099, 991, 991, -1000, 175, -1000, 175, 271, -1000,
	271, 272, 271, -56, 271, -57, 271, 271, 271, 271,
	271, 271, -1000, -108, -1000, 57, 2970, -1000, 268, -1000,
	308, -1000, 1, -1000, -1000, 1988, 154, -1000, -1000, 4140,
	-1000, -1000, 363, -1000, 345, 184, 178, -1000, -1000, -1000,
	-1000, -1000, 2970, 2970, -1000, 991, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 175, 144, 57, 208, 175, 4140, -1000, 3929, -1000,
	-1000, -1000, -1000, -1000, -1000, 57, 199, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 589, 33, 358, 587, 583, 582, 581, 579, 578,
	577, 576, 572, 571, 569, 378, 559, 555, 549, 28,
	547, 13, 99, 10, 21, 65, 546, 30, 41, 55,
	545, 26, 544, 543, 44, 542, 64, 541, 540, 27,
	537, 536, 535, 534, 532, 586, 530, 529, 524, 523,
	522, 20, 1, 2, 22, 8, 521, 117, 7, 518,
	517, 15, 515, 513, 509, 507, 11, 501, 29, 497,
	36, 496, 489, 18, 16, 487, 128, 59, 486, 40,
	0, 6, 52, 12, 483, 650, 9, 38, 482, 481,
	480, 472, 471, 470, 466, 465, 464, 462, 143, 461,
	458, 457, 35, 3, 456, 455, 454, 31, 453, 17,
	450, 449, 448, 14, 5, 447, 4, 446, 32, 445,
	443, 442, 324, 37, 432, 430,
}
var yyR1 = [...]int{

	0, 120, 121, 121, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 6, 6, 18, 18, 18, 7, 8, 9, 9,
	12, 110, 111, 111, 111, 107, 92, 92, 92, 95,
	95, 93, 93, 93, 93, 93, 93, 94, 94, 94,
	94, 94, 96, 96, 96, 96, 96, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 98, 98, 102,
	102, 103, 103, 103, 100, 100, 101, 101, 104, 104,
	104, 99, 99, 99, 99, 99, 99, 105, 105, 106,
	106, 106, 106, 106, 108, 115, 115, 115, 115, 109,
	109, 117, 117, 116, 112, 112, 112, 113, 113, 113,
	114, 114, 114, 10, 10, 10, 118, 118, 11, 11,
	13, 13, 13, 13, 13, 119, 119, 14, 14, 14,
	125, 15, 16, 16, 17, 17, 19, 19, 23, 23,
	22, 22, 24, 24, 24, 24, 84, 84, 84, 83,
	83, 26, 27, 27, 28, 28, 29, 29, 29, 29,
	38, 72, 72, 30, 30, 30, 31, 31, 32, 32,
	89, 89, 88, 88, 88, 87, 87, 33, 33, 33,
	34, 34, 35, 35, 37, 37, 36, 36, 39, 39,
	25, 25, 25, 25, 25, 25, 41, 41, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 50, 50,
	50, 50, 50, 50, 42, 42, 42, 42, 42, 42,
	42, 21, 21, 51, 51, 51, 57, 52, 52, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 48, 48, 48, 46, 46,
	46, 46, 47, 47, 47, 49, 49, 49, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 62, 62, 20, 20, 60,
	60, 61, 63, 63, 58, 58, 58, 59, 59, 59,
	44, 44, 44, 44, 44, 44, 44, 44, 64, 64,
	65, 65, 66, 66, 67, 67, 68, 69, 69, 69,
	70, 70, 70, 70, 43, 43, 43, 43, 43, 43,
	71, 71, 71, 71, 53, 53, 55, 55, 54, 56,
	73, 73, 74, 76, 76, 77, 77, 75, 75, 78,
	78, 78, 81, 81, 82, 82, 85, 85, 86, 86,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 122, 123, 124,
	90, 90, 90,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 8, 4, 1, 3, 1,
	3, 5, 6, 1, 1, 3, 8, 7, 2, 8,
	4, 4, 1, 3, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 0, 1, 0,
	2, 1, 2, 1, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 6, 8, 0, 1, 4, 4,
	4, 5, 3, 3, 5, 0, 1, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 3, 3,
	2, 1, 3, 4, 4, 3, 2, 4, 0, 1,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 6, 7,
	5, 4, 1, 1, 1, 4, 4, 4, 2, 1,
	2, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 0, 2, 0, 3, 0, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -120, -1, -2, -6, -7, -8, -9, -10, -11,
	-13, -14, -3, -4, -18, 8, 9, -12, 94, 95,
	96, 109, 23, 110, 113, 6, -122, 7, 150, 39,
	-121, 155, -66, 14, -17, 5, -15, -125, -15, -15,
	-110, 39, -78, 99, 104, -81, 42, -80, 119, 138,
	132, 130, 111, 128, 124, 122, 123, 108, 117, 118,
	29, 141, 137, 140, 116, 136, 133, 125, 17, 105,
	121, 143, 115, 134, 126, 127, 139, 114, 135, 144,
	154, 131, 129, 145, 99, 99, 100, 94, 100, 99,
	-119, 55, -36, -87, -85, 44, 42, -80, -36, -124,
	-15, -2, 57, -70, 16, 15, -5, -3, -122, 18,
	-75, 102, -16, -27, -28, -29, -30, -38, -57, -122,
	-36, 10, -111, -107, -83, -81, 44, 100, -77, 103,
	-36, -76, 103, -76, 99, 10, -36, 146, 56, 93,
	-19, 19, -123, 41, 150, -25, -40, 59, -45, 21,
	-44, -41, -59, -56, -57, 82, 83, 90, 60, 92,
	-48, -46, -47, -49, 44, 43, 45, 46, 47, 48,
	49, 52, 53, 54, -81, -85, -54, -122, 151, 152,
	62, 28, 147, 148, 149, 103, 88, 150, 42, -80,
	-67, -68, -25, -66, -2, -37, 24, -36, 51, 27,
	40, -33, -34, -35, 30, 33, 35, 31, 36, -89,
	20, -27, -2, -122, -88, -87, 20, -85, -36, 41,
	40, -92, -95, -97, -96, -93, -94, 130, 131, 134,
	135, 136, 137, 138, 139, 140, 141, 111, 126, 127,
	128, 129, 114, 115, 116, 117, 118, 119, 121, 122,
	123, 124, 125, -77, -36, 59, 98, 97, -36, 21,
	-36, -36, 99, 10, -86, -85, -79, 98, 58, 20,
	22, 142, 61, 15, 62, 94, 35, 148, 149, 147,
	26, 9, 23, 110, 19, 86, 96, 65, 66, 112,
	21, 54, 10, 12, 13, 103, 102, 76, 100, 33,
	7, 92, 24, 73, 30, 25, 31, 74, 16, 88,
	36, 59, 52, 37, 57, 14, 34, 75, 97, 150,
	32, 6, 153, 27, 109, 99, 146, 64, 101, 53,
	5, 104, 8, 38, 28, 63, 11, 113, -22, -24,
	84, -25, -85, 58, 57, 73, 40, 17, -25, -42,
	76, 59, 74, 75, 61, 79, 78, 89, 82, 83,
	84, 85, 86, 87, 88, 80, 81, 67, 68, 69,
	70, 71, 72, 77, -57, -122, -45, -45, -45, -45,
	-45, -122, 93, -52, -25, -122, -122, -122, -62, -25,
	-122, -122, -122, -122, 40, -69, 22, 23, -70, -123,
	-43, 27, 28, -2, -122, -36, -73, -74, -58, -83,
	-87, 44, -28, -29, -28, -29, 30, 30, 30, 34,
	30, -34, -85, -123, -123, -2, -87, -39, 11, -112,
	-113, -114, -82, 44, 45, -81, -79, -107, -108, -115,
	105, 104, -109, 100, 25, -104, 52, 59, -100, 144,
	-98, 39, -98, -98, -98, -98, -98, -102, 39, -102,
	-102, -103, 39, -103, 42, 21, -118, 106, 101, -118,
	-36, -36, -26, 40, 10, -84, -83, 20, 93, -25,
	-25, -50, 52, 59, 53, 54, -25, -25, -45, -51,
	-54, -57, 50, 76, 74, 75, 61, -45, -45, -45,
	-45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
	-45, -45, -81, -23, 19, -22, -82, -86, -79, 40,
	-123, -25, -19, -60, -61, 63, -58, -22, -22, -22,
	-68, -73, -53, -55, -54, -122, -2, -71, -83, -81,
	-39, 40, 67, 93, -32, -31, 37, 38, -31, 30,
	-123, -66, -25, 40, -114, 67, 39, 25, -109, 42,
	42, -99, 26, 52, -101, 145, 45, 45, 45, 37,
	-107, -36, -58, -39, -24, -27, -83, 84, -86, 52,
	53, 54, -51, -45, -45, -45, -21, 112, 58, -123,
	-22, -122, 93, -25, 20, -22, -63, -61, 65, -25,
	-123, -123, -123, -123, 40, -123, -123, -123, 40, 93,
	-66, -74, -25, -82, -86, -25, 39, -70, -113, -114,
	-117, -116, -81, 42, -105, 142, 44, 45, 46, 52,
	147, 41, 40, 41, 40, -36, 101, -64, 12, 93,
	-21, 58, -45, -45, -123, -23, -82, -91, 130, 111,
	128, 124, 133, 143, 126, 144, 127, 117, 114, 115,
	116, 119, 44, -66, 66, -25, 64, -55, 28, -2,
	-122, -83, -81, -81, -70, 93, -72, -83, 41, 40,
	-98, -106, 105, 25, 104, 45, 45, -90, -122, -82,
	-58, -65, 13, 15, 84, -45, -123, -123, -98, -98,
	-103, -98, 118, -98, 118, -98, -98, -98, -98, -98,
	-98, -20, 153, -25, -53, -2, 93, -82, 40, 41,
	-116, 25, 25, 41, 41, -25, -52, -123, 44, -123,
	-81, -83,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 312, 0, 130, 130, 130, 0, 349, 0,
	0, 125, 0, 0, 469, 130, 0, 23, 24, 467,
	1, 3, 320, 0, 0, 134, 347, 132, 0, 0,
	28, 0, 0, 345, 350, 351, 352, 353, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 0, 343, 343, 0, 0, 0,
	0, 126, 127, 186, 175, 176, 356, 357, 128, 129,
	136, 17, 0, 13, 0, 0, 312, 19, 0, 135,
	0, 348, 131, 0, 152, 154, 155, 156, -2, 0,
	172, 0, 0, 32, 0, 149, 150, 345, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 123, 0, 0,
	0, 137, 18, 468, 25, 321, 190, 0, 195, 0,
	229, 230, 231, 232, 233, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 300, 301, 302, 303, 304, 305,
	306, 307, 196, 197, 297, 0, 339, 0, 0, 0,
	285, 0, 262, 263, 264, 0, 0, 0, -2, -2,
	313, 314, 317, 320, 17, 0, 0, 185, 133, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	171, 0, 17, 0, 160, 173, 0, 175, 188, 104,
	0, 78, 74, 37, 38, 67, 40, 67, 67, 59,
	60, 61, 62, 63, 64, 65, 66, 52, 67, 67,
	67, 56, 41, 42, 43, 44, 45, 46, 69, 69,
	69, 71, 71, 0, 30, 0, 116, 116, 118, 344,
	119, 120, 0, 0, 187, 358, 359, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 16, 140,
	142, 146, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 219, 220, 207, 0, 246, 247, 248, 249,
	0, 138, 0, 0, 227, 0, 0, 136, 0, 286,
	0, 0, 0, 0, 0, 316, 318, 319, 14, 20,
	21, 0, 0, -2, 0, 184, 188, 340, 0, 294,
	0, -2, 153, 168, 0, 165, 178, 179, 180, 0,
	182, 183, 158, 159, 226, 17, 174, 312, 0, 31,
	105, 107, 110, 111, 112, 354, 355, 33, 34, 0,
	452, 0, 0, 99, 100, 81, 79, 0, 76, 75,
	39, 0, 57, 58, 53, 54, 55, 47, 0, 48,
	49, 50, 0, 51, 0, 346, 0, 117, 0, 0,
	121, 124, 188, 0, 0, 143, 147, 0, 0, 191,
	192, 194, 208, 0, 210, 212, 322, 323, 198, 199,
	223, 224, 225, 0, 0, 0, 0, 221, 203, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 250, 0, 0, 139, 298, 0, -2, 0,
	338, 0, 0, 292, 289, 0, 0, 0, 0, 0,
	315, 22, 324, 334, 336, 0, 17, 0, 330, 149,
	312, 0, 0, 0, 163, 169, 0, 0, 164, 181,
	-2, 320, 189, 0, 108, 0, 0, 95, 0, 97,
	98, 87, 0, 80, 36, 77, 0, 0, 0, 0,
	113, 114, 0, 308, 141, 151, 148, 144, 0, 209,
	211, 213, 200, 221, 204, 0, 201, 0, 0, 255,
	0, 138, 0, 228, 0, 312, 0, 290, 0, 0,
	261, 265, 266, 267, 0, 337, -2, 0, 0, 0,
	320, 341, 342, 295, 0, 166, 0, 27, 106, 109,
	0, 101, 67, 96, 89, 88, 82, 83, 84, 85,
	86, 68, 0, 72, 0, 470, 0, 310, 0, 0,
	202, 0, 222, 205, 256, 0, 299, 0, 67, 269,
	67, 71, 67, 273, 67, 276, 67, 67, 67, 67,
	67, 67, 284, 287, 260, 293, 0, 335, 0, -2,
	0, 332, 149, 331, 26, 0, 0, 161, 94, 0,
	103, 35, 0, 91, 93, 0, 0, 29, 471, 472,
	115, 15, 0, 0, 145, 206, 257, 258, 268, 270,
	271, 272, 274, 275, 277, 278, 279, 280, 281, 282,
	283, 0, 0, 291, 327, 17, 0, 296, 0, 167,
	102, 90, 92, 70, 73, 311, 309, 259, 288, -2,
	333, 162,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 60, 3, 3, 3, 87, 79, 3,
	39, 41, 84, 82, 40, 83, 93, 85, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 155,
	68, 67, 69, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 78, 3, 90,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 61, 62, 63, 64, 65,
	66, 70, 71, 72, 73, 74, 75, 76, 77, 80,
	81, 86, 88, 91, 92, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:243
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:248
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:249
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:253
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:267
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			yyVAL.selStmt = sel
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:274
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit}
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:281
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), GroupBy: GroupBy(yyDollar[7].exprs), Having: NewWhere(HavingStr, yyDollar[8].expr)}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:285
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:291
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:295
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:301
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:305
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:312
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			yyVAL.statement = ins
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:322
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:334
		{
			yyVAL.str = InsertStr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:338
		{
			yyVAL.str = ReplaceStr
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:342
		{
			yyVAL.str = ReplaceStr
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:348
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:354
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:360
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:365
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:372
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:379
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:386
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:391
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:395
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:401
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:410
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:420
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:425
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:552
		{
			yyVAL.optVal = nil
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:556
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:561
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:565
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:573
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:577
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:583
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:591
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:600
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:604
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:610
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:614
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:618
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:623
		{
			yyVAL.optVal = nil
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:627
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:635
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:639
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:643
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:648
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:657
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:661
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.colKeyOpt = colKey
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:669
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:673
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:679
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:685
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:689
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:693
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:707
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:717
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:723
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.str = ""
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:736
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.str = yyDollar[1].str
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:752
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:758
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:762
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:772
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:776
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[6].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:781
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:787
		{
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:791
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:799
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropIndexStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:809
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowCreate: true, OnTable: yyDollar[4].tableName}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:813
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[5].tableName}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[3].tableName}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:825
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[5].tableName}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:830
		{
			yyVAL.bytes = nil
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:834
		{
			yyVAL.bytes = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:840
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[2].tableName}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[2].tableName}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:848
		{
			yyVAL.statement = &Explain{}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:853
		{
			setAllowComments(yylex, true)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:863
		{
			yyVAL.bytes2 = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:867
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:873
		{
			yyVAL.str = UnionStr
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:877
		{
			yyVAL.str = UnionAllStr
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:882
		{
			yyVAL.str = ""
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:886
		{
			yyVAL.str = DistinctStr
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:891
		{
			yyVAL.selectExprs = nil
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:895
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:901
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:905
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:911
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:915
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:919
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:923
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:928
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:932
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:936
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:959
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:969
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:977
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:993
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:997
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.empty = struct{}{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.empty = struct{}{}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.str = JoinStr
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.str = InnerJoinStr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.str = CrossJoinStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = LeftJoinStr
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = LeftJoinStr
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.str = NaturalJoinStr
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.str = NaturalLeftJoinStr
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.expr = nil
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = IsNullStr
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.str = IsNotNullStr
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.str = IsTrueStr
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.str = IsNotTrueStr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.str = IsFalseStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = IsNotFalseStr
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = EqualStr
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.str = LessThanStr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.str = GreaterThanStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.str = LessEqualStr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.str = GreaterEqualStr
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.str = NotEqualStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.str = NullSafeNotEqualStr
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.expr = nil
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1366
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1388
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_timestamp")}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_date")}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_time")}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = nil
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.str = string("")
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.expr = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = NewPosArg(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &NullVal{}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.exprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.orderBy = nil
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.str = AscScr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.str = AscScr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.str = DescScr
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.limit = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1758
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.byt = 0
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.byt = 1
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.empty = struct{}{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = IgnoreStr
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.empty = struct{}{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			decNesting(yylex)
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2032
		{
			forceEOF(yylex)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2037
		{
			forceEOF(yylex)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			forceEOF(yylex)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2045
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
