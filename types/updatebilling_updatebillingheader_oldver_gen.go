package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHasholdver marshals for hash
func (z *UpdateBillingHeader) MarshalHasholdver() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())

	o = append(o, 0x83)
	if oTemp, err := z.Nonce.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Receiver.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendArrayHeader(o, uint32(len(z.Users)))
	for za0001 := range z.Users {
		if z.Users[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.Users[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsizeoldver returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UpdateBillingHeader) Msgsizeoldver() (s int) {
	s = 1 + 6 + z.Nonce.Msgsize() + 9 + z.Receiver.Msgsize() + 6 + hsp.ArrayHeaderSize
	for za0001 := range z.Users {
		if z.Users[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z.Users[za0001].Msgsize()
		}
	}
	return
}
