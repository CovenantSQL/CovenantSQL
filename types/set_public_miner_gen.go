package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *SetPublicMiner) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83)
	if oTemp, err := z.DefaultHashSignVerifierImpl.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	// map header, size 3
	o = append(o, 0x83)
	if oTemp, err := z.SetPublicMinerHeader.Miner.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendUint8(o, z.SetPublicMinerHeader.Enabled)
	if oTemp, err := z.SetPublicMinerHeader.Nonce.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.TransactionTypeMixin.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SetPublicMiner) Msgsize() (s int) {
	s = 1 + 28 + z.DefaultHashSignVerifierImpl.Msgsize() + 21 + 1 + 6 + z.SetPublicMinerHeader.Miner.Msgsize() + 8 + hsp.Uint8Size + 6 + z.SetPublicMinerHeader.Nonce.Msgsize() + 21 + z.TransactionTypeMixin.Msgsize()
	return
}

// MarshalHash marshals for hash
func (z *SetPublicMinerHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83)
	o = hsp.AppendUint8(o, z.Enabled)
	if oTemp, err := z.Miner.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Nonce.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SetPublicMinerHeader) Msgsize() (s int) {
	s = 1 + 8 + hsp.Uint8Size + 6 + z.Miner.Msgsize() + 6 + z.Nonce.Msgsize()
	return
}
